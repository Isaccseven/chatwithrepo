plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.github.node-gradle.node' version '7.0.1'
}

group = 'com.codeium'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.ai:spring-ai-ollama-client:1.0.0-M5'
    implementation 'org.springframework.ai:spring-ai-pgvector-store:1.0.0-M5'
    implementation 'org.gitlab4j:gitlab4j-api:5.5.0'
    implementation 'com.github.javaparser:javaparser-core:3.25.9'
    implementation 'org.postgresql:postgresql'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

node {
    version = '20.11.0'
    npmVersion = '10.4.0'
    download = true
    nodeProjectDir = file("${project.projectDir}/frontend")
}

tasks.register('buildFrontend') {
    dependsOn 'npm_run_build'
}

tasks.register('npm_run_build') {
    dependsOn 'npm_install'
    group = 'build'
    description = 'Build the frontend'
    doLast {
        project.exec {
            workingDir = file("${project.projectDir}/frontend")
            if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
                commandLine 'cmd', '/c', 'npm', 'run', 'build'
            } else {
                commandLine 'npm', 'run', 'build'
            }
        }
    }
}

tasks.named('bootJar') {
    dependsOn 'buildFrontend'
    from("${project.projectDir}/frontend/dist") {
        into 'static'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
